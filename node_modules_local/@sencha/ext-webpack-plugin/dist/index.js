'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require('@babel/polyfill');

const fs = require('fs');

const path = require('path');

const pluginUtil = require(`./pluginUtil`);

const replace = require("replace");

const configBundleName = "[name].js";
const defaultBundleName = "main.js";
const tmpCmdPluginFile = "temp.txt";

class ExtWebpackPlugin {
  constructor(options) {
    var constructorOutput = pluginUtil._constructor(options);

    this.vars = constructorOutput.vars;
    this.options = constructorOutput.options;
    this.vars.child = null;
    var me = this;
    var v = [`exit`, `SIGINT`, `SIGUSR1`, `SIGUSR2`, `uncaughtException`, `SIGTERM`];
    v.forEach(eventType => {
      process.on(eventType, function (eventType) {
        if (me.vars.child != null) {
          console.log('\nnode process and sencha cmd process ended');
          me.vars.child.kill();
          me.vars.child = null;
        } else {
          if (eventType != 0) {
            console.log('\nnode process ended');
          }
        }

        process.exit();
      });
    }); //console.log('added')
  }

  apply(compiler) {
    const vars = this.vars;
    const options = this.options;
    const app = this.app;

    if (!compiler.hooks) {
      console.log('not webpack 4');
      return;
    }

    compiler.hooks.thisCompilation.tap(`ext-this-compilation`, compilation => {
      pluginUtil.logh(app, `HOOK thisCompilation`);

      pluginUtil._thisCompilation(compiler, compilation, vars, options);

      if (vars.pluginErrors.length > 0) {
        compilation.errors.push(new Error(vars.pluginErrors.join("")));
        return;
      }
    }); //var cRun = 0;

    compiler.hooks.compilation.tap(`ext-compilation`, compilation => {
      pluginUtil.logh(app, `HOOK compilation`); //if (cRun == 0) {

      pluginUtil._compilation(compiler, compilation, vars, options); //}
      //cRun++;

    });
    compiler.hooks.afterCompile.tap('ext-after-compile', compilation => {
      pluginUtil.logh(app, `HOOK afterCompile`);

      pluginUtil._afterCompile(compiler, compilation, vars, options);
    });
    compiler.hooks.afterEmit.tapAsync('ext-after-emit', (compilation, callback) => {
      pluginUtil._emit(compiler, compilation, vars, options, callback);
    });
    compiler.hooks.done.tap(`ext-done`, stats => {
      pluginUtil.logh(app, `HOOK done`); // this.postBuildProcess(stats.compilation.outputOptions)

      pluginUtil._done(stats, vars, options);
    });
  }

}

exports.default = ExtWebpackPlugin;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiZnMiLCJwYXRoIiwicGx1Z2luVXRpbCIsInJlcGxhY2UiLCJjb25maWdCdW5kbGVOYW1lIiwiZGVmYXVsdEJ1bmRsZU5hbWUiLCJ0bXBDbWRQbHVnaW5GaWxlIiwiRXh0V2VicGFja1BsdWdpbiIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsImNvbnN0cnVjdG9yT3V0cHV0IiwiX2NvbnN0cnVjdG9yIiwidmFycyIsImNoaWxkIiwibWUiLCJ2IiwiZm9yRWFjaCIsImV2ZW50VHlwZSIsInByb2Nlc3MiLCJvbiIsImNvbnNvbGUiLCJsb2ciLCJraWxsIiwiZXhpdCIsImFwcGx5IiwiY29tcGlsZXIiLCJhcHAiLCJob29rcyIsInRoaXNDb21waWxhdGlvbiIsInRhcCIsImNvbXBpbGF0aW9uIiwibG9naCIsIl90aGlzQ29tcGlsYXRpb24iLCJwbHVnaW5FcnJvcnMiLCJsZW5ndGgiLCJlcnJvcnMiLCJwdXNoIiwiRXJyb3IiLCJqb2luIiwiX2NvbXBpbGF0aW9uIiwiYWZ0ZXJDb21waWxlIiwiX2FmdGVyQ29tcGlsZSIsImFmdGVyRW1pdCIsInRhcEFzeW5jIiwiY2FsbGJhY2siLCJfZW1pdCIsImRvbmUiLCJzdGF0cyIsIl9kb25lIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQUNBQSxPQUFPLENBQUMsaUJBQUQsQ0FBUDs7QUFDQSxNQUFNQyxFQUFFLEdBQUdELE9BQU8sQ0FBQyxJQUFELENBQWxCOztBQUNBLE1BQU1FLElBQUksR0FBR0YsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTUcsVUFBVSxHQUFHSCxPQUFPLENBQUUsY0FBRixDQUExQjs7QUFDQSxNQUFNSSxPQUFPLEdBQUdKLE9BQU8sQ0FBQyxTQUFELENBQXZCOztBQUVBLE1BQU1LLGdCQUFnQixHQUFHLFdBQXpCO0FBQ0EsTUFBTUMsaUJBQWlCLEdBQUcsU0FBMUI7QUFDQSxNQUFNQyxnQkFBZ0IsR0FBRyxVQUF6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QlgsR0FBNUIsQ0FBZ0MsbUJBQWhDLEVBQXNEQyxXQUFELElBQWlCO0FBQ3BFNUIsTUFBQUEsVUFBVSxDQUFDNkIsSUFBWCxDQUFnQkwsR0FBaEIsRUFBc0IsbUJBQXRCOztBQUNBeEIsTUFBQUEsVUFBVSxDQUFDdUMsYUFBWCxDQUF5QmhCLFFBQXpCLEVBQW1DSyxXQUFuQyxFQUFnRGxCLElBQWhELEVBQXNESCxPQUF0RDtBQUNELEtBSEQ7QUFLQWdCLElBQUFBLFFBQVEsQ0FBQ0UsS0FBVCxDQUFlZSxTQUFmLENBQXlCQyxRQUF6QixDQUFrQyxnQkFBbEMsRUFBb0QsQ0FBQ2IsV0FBRCxFQUFjYyxRQUFkLEtBQTJCO0FBQzdFMUMsTUFBQUEsVUFBVSxDQUFDMkMsS0FBWCxDQUFpQnBCLFFBQWpCLEVBQTJCSyxXQUEzQixFQUF3Q2xCLElBQXhDLEVBQThDSCxPQUE5QyxFQUF1RG1DLFFBQXZEO0FBQ0QsS0FGRDtBQUlBbkIsSUFBQUEsUUFBUSxDQUFDRSxLQUFULENBQWVtQixJQUFmLENBQW9CakIsR0FBcEIsQ0FBeUIsVUFBekIsRUFBcUNrQixLQUFELElBQVc7QUFDN0M3QyxNQUFBQSxVQUFVLENBQUM2QixJQUFYLENBQWdCTCxHQUFoQixFQUFzQixXQUF0QixFQUQ2QyxDQUU3Qzs7QUFDQXhCLE1BQUFBLFVBQVUsQ0FBQzhDLEtBQVgsQ0FBaUJELEtBQWpCLEVBQXdCbkMsSUFBeEIsRUFBOEJILE9BQTlCO0FBQ0QsS0FKRDtBQUtEOztBQXhFbUMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcbnJlcXVpcmUoJ0BiYWJlbC9wb2x5ZmlsbCcpXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgcGx1Z2luVXRpbCA9IHJlcXVpcmUoYC4vcGx1Z2luVXRpbGApXG5jb25zdCByZXBsYWNlID0gcmVxdWlyZShcInJlcGxhY2VcIik7XG5cbmNvbnN0IGNvbmZpZ0J1bmRsZU5hbWUgPSBcIltuYW1lXS5qc1wiO1xuY29uc3QgZGVmYXVsdEJ1bmRsZU5hbWUgPSBcIm1haW4uanNcIlxuY29uc3QgdG1wQ21kUGx1Z2luRmlsZSA9IFwidGVtcC50eHRcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFeHRXZWJwYWNrUGx1Z2luIHtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdmFyIGNvbnN0cnVjdG9yT3V0cHV0ID0gcGx1Z2luVXRpbC5fY29uc3RydWN0b3Iob3B0aW9ucylcbiAgICB0aGlzLnZhcnMgPSBjb25zdHJ1Y3Rvck91dHB1dC52YXJzXG4gICAgdGhpcy5vcHRpb25zID0gY29uc3RydWN0b3JPdXRwdXQub3B0aW9uc1xuXG4gICAgdGhpcy52YXJzLmNoaWxkID0gbnVsbDtcbiAgICB2YXIgbWUgPSB0aGlzO1xuXG4gICAgdmFyIHYgPSBbYGV4aXRgLCBgU0lHSU5UYCwgYFNJR1VTUjFgLCBgU0lHVVNSMmAsIGB1bmNhdWdodEV4Y2VwdGlvbmAsIGBTSUdURVJNYF1cbiAgICB2LmZvckVhY2goZXZlbnRUeXBlID0+IHtcbiAgICAgIHByb2Nlc3Mub24oZXZlbnRUeXBlLCBmdW5jdGlvbihldmVudFR5cGUpe1xuICAgICAgICBpZiAobWUudmFycy5jaGlsZCAhPSBudWxsKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1xcbm5vZGUgcHJvY2VzcyBhbmQgc2VuY2hhIGNtZCBwcm9jZXNzIGVuZGVkJylcbiAgICAgICAgICBtZS52YXJzLmNoaWxkLmtpbGwoKTtcbiAgICAgICAgICBtZS52YXJzLmNoaWxkID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpZiAoZXZlbnRUeXBlICE9IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcXG5ub2RlIHByb2Nlc3MgZW5kZWQnKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwcm9jZXNzLmV4aXQoKTtcbiAgICAgIH0pO1xuICAgIH0pXG4gICAgLy9jb25zb2xlLmxvZygnYWRkZWQnKVxuICB9XG5cbiAgYXBwbHkoY29tcGlsZXIpIHtcbiAgICBjb25zdCB2YXJzID0gdGhpcy52YXJzXG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9uc1xuICAgIGNvbnN0IGFwcCA9IHRoaXMuYXBwXG5cbiAgICBpZiAoIWNvbXBpbGVyLmhvb2tzKSB7XG4gICAgICBjb25zb2xlLmxvZygnbm90IHdlYnBhY2sgNCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbXBpbGVyLmhvb2tzLnRoaXNDb21waWxhdGlvbi50YXAoYGV4dC10aGlzLWNvbXBpbGF0aW9uYCwgKGNvbXBpbGF0aW9uKSA9PiB7XG4gICAgICBwbHVnaW5VdGlsLmxvZ2goYXBwLCBgSE9PSyB0aGlzQ29tcGlsYXRpb25gKVxuICAgICAgcGx1Z2luVXRpbC5fdGhpc0NvbXBpbGF0aW9uKGNvbXBpbGVyLCBjb21waWxhdGlvbiwgdmFycywgb3B0aW9ucylcblxuICAgICAgaWYgKHZhcnMucGx1Z2luRXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29tcGlsYXRpb24uZXJyb3JzLnB1c2goIG5ldyBFcnJvcih2YXJzLnBsdWdpbkVycm9ycy5qb2luKFwiXCIpKSApXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH0pXG5cbiAgICAvL3ZhciBjUnVuID0gMDtcbiAgICBjb21waWxlci5ob29rcy5jb21waWxhdGlvbi50YXAoYGV4dC1jb21waWxhdGlvbmAsIChjb21waWxhdGlvbikgPT4ge1xuICAgICAgcGx1Z2luVXRpbC5sb2doKGFwcCwgYEhPT0sgY29tcGlsYXRpb25gKVxuICAgICAgLy9pZiAoY1J1biA9PSAwKSB7XG4gICAgICAgIHBsdWdpblV0aWwuX2NvbXBpbGF0aW9uKGNvbXBpbGVyLCBjb21waWxhdGlvbiwgdmFycywgb3B0aW9ucyk7XG4gICAgICAvL31cbiAgICAgIC8vY1J1bisrO1xuICAgIH0pXG5cbiAgICBjb21waWxlci5ob29rcy5hZnRlckNvbXBpbGUudGFwKCdleHQtYWZ0ZXItY29tcGlsZScsIChjb21waWxhdGlvbikgPT4ge1xuICAgICAgcGx1Z2luVXRpbC5sb2doKGFwcCwgYEhPT0sgYWZ0ZXJDb21waWxlYClcbiAgICAgIHBsdWdpblV0aWwuX2FmdGVyQ29tcGlsZShjb21waWxlciwgY29tcGlsYXRpb24sIHZhcnMsIG9wdGlvbnMpXG4gICAgfSlcblxuICAgIGNvbXBpbGVyLmhvb2tzLmFmdGVyRW1pdC50YXBBc3luYygnZXh0LWFmdGVyLWVtaXQnLCAoY29tcGlsYXRpb24sIGNhbGxiYWNrKSA9PiB7XG4gICAgICBwbHVnaW5VdGlsLl9lbWl0KGNvbXBpbGVyLCBjb21waWxhdGlvbiwgdmFycywgb3B0aW9ucywgY2FsbGJhY2spXG4gICAgfSlcblxuICAgIGNvbXBpbGVyLmhvb2tzLmRvbmUudGFwKGBleHQtZG9uZWAsIChzdGF0cykgPT4ge1xuICAgICAgcGx1Z2luVXRpbC5sb2doKGFwcCwgYEhPT0sgZG9uZWApXG4gICAgICAvLyB0aGlzLnBvc3RCdWlsZFByb2Nlc3Moc3RhdHMuY29tcGlsYXRpb24ub3V0cHV0T3B0aW9ucylcbiAgICAgIHBsdWdpblV0aWwuX2RvbmUoc3RhdHMsIHZhcnMsIG9wdGlvbnMpXG4gICAgfSlcbiAgfVxufVxuIl19