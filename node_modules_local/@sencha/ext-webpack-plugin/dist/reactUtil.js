"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._getDefaultVars = _getDefaultVars;
exports._extractFromSource = _extractFromSource;

function _getDefaultVars() {
  return {
    touchFile: '/src/themer.js',
    watchStarted: false,
    buildstep: '1 of 1',
    firstTime: true,
    firstCompile: true,
    browserCount: 0,
    manifest: null,
    extPath: 'ext',
    pluginErrors: [],
    deps: [],
    usedExtComponents: [],
    rebuild: true
  };
}

function _extractFromSource(module, options, compilation, extComponents) {
  const logv = require('./pluginUtil').logv;

  logv(options.verbose, 'FUNCTION _extractFromSource');

  try {
    var js = module._source._value;
    logv(options.verbose, 'FUNCTION extractFromSource');

    var generate = require("@babel/generator").default;

    var parse = require("babylon").parse;

    var traverse = require("ast-traverse");

    const statements = [];
    const ast = parse(js, {
      plugins: ['jsx', 'flow', 'doExpressions', 'objectRestSpread', 'classProperties', 'exportExtensions', 'asyncGenerators', 'functionBind', 'functionSent', 'dynamicImport'],
      sourceType: 'module'
    });
    traverse(ast, {
      pre: function (node) {
        if (node.type === 'CallExpression' && node.callee && node.callee.object && node.callee.object.name === 'Ext') {
          statements.push(generate(node).code);
        }

        if (node.type == 'ImportDeclaration') {
          if (node.source.extra.rawValue == '@sencha/ext-react-classic' || node.source.extra.rawValue == '@sencha/ext-react-modern') {
            node.specifiers.forEach(n => {
              var name = n.imported.name;
              var prefix = name.substring(0, 3);

              if (prefix == 'Ext') {
                name = name.substring(3);
              }

              name = name.toLowerCase();
              statements.push(`Ext.create({xtype: '${name}'})`);
            });
          }
        }
      }
    });
    return statements;
  } catch (e) {
    //console.log(module.resource)
    //console.log(js)
    //console.log(e)
    //compilation.errors.push('extractFromSource: ' + e)
    return [];
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZWFjdFV0aWwuanMiXSwibmFtZXMiOlsiX2dldERlZmF1bHRWYXJzIiwidG91Y2hGaWxlIiwid2F0Y2hTdGFydGVkIiwiYnVpbGRzdGVwIiwiZmlyc3RUaW1lIiwiZmlyc3RDb21waWxlIiwiYnJvd3NlckNvdW50IiwibWFuaWZlc3QiLCJleHRQYXRoIiwicGx1Z2luRXJyb3JzIiwiZGVwcyIsInVzZWRFeHRDb21wb25lbnRzIiwicmVidWlsZCIsIl9leHRyYWN0RnJvbVNvdXJjZSIsIm1vZHVsZSIsIm9wdGlvbnMiLCJjb21waWxhdGlvbiIsImV4dENvbXBvbmVudHMiLCJsb2d2IiwicmVxdWlyZSIsInZlcmJvc2UiLCJqcyIsIl9zb3VyY2UiLCJfdmFsdWUiLCJnZW5lcmF0ZSIsImRlZmF1bHQiLCJwYXJzZSIsInRyYXZlcnNlIiwic3RhdGVtZW50cyIsImFzdCIsInBsdWdpbnMiLCJzb3VyY2VUeXBlIiwicHJlIiwibm9kZSIsInR5cGUiLCJjYWxsZWUiLCJvYmplY3QiLCJuYW1lIiwicHVzaCIsImNvZGUiLCJzb3VyY2UiLCJleHRyYSIsInJhd1ZhbHVlIiwic3BlY2lmaWVycyIsImZvckVhY2giLCJuIiwiaW1wb3J0ZWQiLCJwcmVmaXgiLCJzdWJzdHJpbmciLCJ0b0xvd2VyQ2FzZSIsImUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVPLFNBQVNBLGVBQVQsR0FBMkI7QUFDaEMsU0FBTztBQUNMQyxJQUFBQSxTQUFTLEVBQUUsZ0JBRE47QUFFTEMsSUFBQUEsWUFBWSxFQUFHLEtBRlY7QUFHTEMsSUFBQUEsU0FBUyxFQUFFLFFBSE47QUFJTEMsSUFBQUEsU0FBUyxFQUFHLElBSlA7QUFLTEMsSUFBQUEsWUFBWSxFQUFFLElBTFQ7QUFNTEMsSUFBQUEsWUFBWSxFQUFHLENBTlY7QUFPTEMsSUFBQUEsUUFBUSxFQUFFLElBUEw7QUFRTEMsSUFBQUEsT0FBTyxFQUFFLEtBUko7QUFTTEMsSUFBQUEsWUFBWSxFQUFFLEVBVFQ7QUFV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dCI6WyJcInVzZSBzdHJpY3RcIlxuXG5leHBvcnQgZnVuY3Rpb24gX2dldERlZmF1bHRWYXJzKCkge1xuICByZXR1cm4ge1xuICAgIHRvdWNoRmlsZTogJy9zcmMvdGhlbWVyLmpzJyxcbiAgICB3YXRjaFN0YXJ0ZWQgOiBmYWxzZSxcbiAgICBidWlsZHN0ZXA6ICcxIG9mIDEnLFxuICAgIGZpcnN0VGltZSA6IHRydWUsXG4gICAgZmlyc3RDb21waWxlOiB0cnVlLFxuICAgIGJyb3dzZXJDb3VudCA6IDAsXG4gICAgbWFuaWZlc3Q6IG51bGwsXG4gICAgZXh0UGF0aDogJ2V4dCcsXG4gICAgcGx1Z2luRXJyb3JzOiBbXSxcbiAgICBkZXBzOiBbXSxcbiAgICB1c2VkRXh0Q29tcG9uZW50czogW10sXG4gICAgcmVidWlsZDogdHJ1ZVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfZXh0cmFjdEZyb21Tb3VyY2UobW9kdWxlLCBvcHRpb25zLCBjb21waWxhdGlvbiwgZXh0Q29tcG9uZW50cykge1xuICBjb25zdCBsb2d2ID0gcmVxdWlyZSgnLi9wbHVnaW5VdGlsJykubG9ndlxuICBsb2d2KG9wdGlvbnMudmVyYm9zZSwnRlVOQ1RJT04gX2V4dHJhY3RGcm9tU291cmNlJylcbnRyeSB7XG4gICAgdmFyIGpzID0gbW9kdWxlLl9zb3VyY2UuX3ZhbHVlXG4gICAgbG9ndihvcHRpb25zLnZlcmJvc2UsJ0ZVTkNUSU9OIGV4dHJhY3RGcm9tU291cmNlJylcblxuICAgIHZhciBnZW5lcmF0ZSA9IHJlcXVpcmUoXCJAYmFiZWwvZ2VuZXJhdG9yXCIpLmRlZmF1bHRcbiAgICB2YXIgcGFyc2UgPSByZXF1aXJlKFwiYmFieWxvblwiKS5wYXJzZVxuICAgIHZhciB0cmF2ZXJzZSA9IHJlcXVpcmUoXCJhc3QtdHJhdmVyc2VcIilcblxuICAgIGNvbnN0IHN0YXRlbWVudHMgPSBbXVxuXG4gICAgY29uc3QgYXN0ID0gcGFyc2UoanMsIHtcbiAgICAgIHBsdWdpbnM6IFtcbiAgICAgICAgJ2pzeCcsXG4gICAgICAgICdmbG93JyxcbiAgICAgICAgJ2RvRXhwcmVzc2lvbnMnLFxuICAgICAgICAnb2JqZWN0UmVzdFNwcmVhZCcsXG4gICAgICAgICdjbGFzc1Byb3BlcnRpZXMnLFxuICAgICAgICAnZXhwb3J0RXh0ZW5zaW9ucycsXG4gICAgICAgICdhc3luY0dlbmVyYXRvcnMnLFxuICAgICAgICAnZnVuY3Rpb25CaW5kJyxcbiAgICAgICAgJ2Z1bmN0aW9uU2VudCcsXG4gICAgICAgICdkeW5hbWljSW1wb3J0J1xuICAgICAgXSxcbiAgICAgIHNvdXJjZVR5cGU6ICdtb2R1bGUnXG4gICAgfSlcblxuICAgIHRyYXZlcnNlKGFzdCwge1xuICAgICAgcHJlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdDYWxsRXhwcmVzc2lvbidcbiAgICAgICAgICAgICYmIG5vZGUuY2FsbGVlXG4gICAgICAgICAgICAmJiBub2RlLmNhbGxlZS5vYmplY3RcbiAgICAgICAgICAgICYmIG5vZGUuY2FsbGVlLm9iamVjdC5uYW1lID09PSAnRXh0Jykge1xuICAgICAgICAgIHN0YXRlbWVudHMucHVzaChnZW5lcmF0ZShub2RlKS5jb2RlKVxuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlLnR5cGUgPT0gJ0ltcG9ydERlY2xhcmF0aW9uJykge1xuICAgICAgICAgIGlmICggbm9kZS5zb3VyY2UuZXh0cmEucmF3VmFsdWUgPT0gJ0BzZW5jaGEvZXh0LXJlYWN0LWNsYXNzaWMnIHx8XG4gICAgICAgICAgICAgICBub2RlLnNvdXJjZS5leHRyYS5yYXdWYWx1ZSA9PSAnQHNlbmNoYS9leHQtcmVhY3QtbW9kZXJuJykge1xuICAgICAgICAgICAgbm9kZS5zcGVjaWZpZXJzLmZvckVhY2gobiA9PiB7XG4gICAgICAgICAgICAgIHZhciBuYW1lID0gbi5pbXBvcnRlZC5uYW1lXG4gICAgICAgICAgICAgIHZhciBwcmVmaXggPSBuYW1lLnN1YnN0cmluZygwLCAzKTtcbiAgICAgICAgICAgICAgaWYgKHByZWZpeCA9PSAnRXh0Jykge1xuICAgICAgICAgICAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cmluZygzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgIHN0YXRlbWVudHMucHVzaChgRXh0LmNyZWF0ZSh7eHR5cGU6ICcke25hbWV9J30pYCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIHN0YXRlbWVudHNcbn1cbmNhdGNoKGUpIHtcbiAgLy9jb25zb2xlLmxvZyhtb2R1bGUucmVzb3VyY2UpXG4gIC8vY29uc29sZS5sb2coanMpXG4gIC8vY29uc29sZS5sb2coZSlcbiAgLy9jb21waWxhdGlvbi5lcnJvcnMucHVzaCgnZXh0cmFjdEZyb21Tb3VyY2U6ICcgKyBlKVxuICByZXR1cm4gW11cbn1cbn1cbiJdfQ==